package com.t4g.cnb.images;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import sun.text.Normalizer;

import com.t4g.cnb.utils.Utils;
import com.t4g.cnb.utils.ZipUtility;

@SuppressWarnings("restriction")
public class ImageFileMapper {

  static Logger logger = LoggerFactory.getLogger(ImageFileMapper.class);

  private void runConversion(String multimediaDir) throws ClassNotFoundException, ParseException, IOException {
    createMultimediaZip(multimediaDir);
    createZip(multimediaDir, "Photo/original", "photos.zip");
    createZip(multimediaDir, "Audio/audio", "audios.zip");
    createZip(multimediaDir, "Video", "videos.zip");
    createZip(multimediaDir, "mp3", "mp3s.zip");
  }

  private static void createMultimediaZip(String multimediaDir) throws ClassNotFoundException, ParseException,
      IOException {
    final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    // need to create a map containing image name and new date
    Map<String, String> dbImages = getDatabaseImageInfo();
    String maindir = "multimedia/";
    for (String key : dbImages.keySet()) {
      String newDate = dbImages.get(key);
      Calendar cal = Calendar.getInstance();
      Date tDate = dateFormat.parse(newDate);
      cal.setTime(tDate);
      int month = cal.get(Calendar.MONTH) + 1;
      int year = cal.get(Calendar.YEAR);

      String photoDestDir = multimediaDir + maindir + year + "/" + (month < 10 ? "0" + (month) : (month)) + "/";

      if (!new File(photoDestDir).exists()) {
        new File(photoDestDir).mkdirs();
      }
      copyFile(new File(multimediaDir + "Photo/small/" + key), new File(photoDestDir + key));
    }

    // zip up the files
    ZipUtility.zipDirectory(new File(multimediaDir + maindir), new File(multimediaDir + "multimedia.zip"));
    logger.info("Finished Multimedia Zip");

  }

  private static void createZip(String mainDir, String subDir, String zipName) throws IOException {
    logger.info("Starting createZip: " + zipName + " from " + mainDir + subDir);
    renameFilesWithFrenchCharacters(mainDir + subDir);
    ZipUtility.zipDirectory(new File(mainDir + subDir), new File(mainDir + zipName));
    logger.info("Finished createZip.");
  }

  private static void copyFile(File source, File dest) throws IOException {
    //logger.info("File:" + dest);
    if (!dest.exists()) {
      dest.createNewFile();
    }
    try {
      FileInputStream fi = new FileInputStream(source);
      FileChannel fic = fi.getChannel();
      MappedByteBuffer mbuf = fic.map(FileChannel.MapMode.READ_ONLY, 0, source.length());
      fic.close();
      fi.close();
      FileOutputStream fo = new FileOutputStream(dest);
      FileChannel foc = fo.getChannel();
      foc.write(mbuf);
      foc.close();
      fo.close();
    } catch (FileNotFoundException fnfe) {
      logger.info("**** " + source + " NOT FOUND ****");
    }
  }

  private static Map<String, String> getDatabaseImageInfo() throws ClassNotFoundException {
    Map<String, String> dbImage = new HashMap<String, String>();
    Connection conn = null;
    PreparedStatement stmt = null;
    try {
      Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
      String sDBQ = "C:\\GNB\\multimedia\\multimedia.mdb";
      String database = "jdbc:odbc:Driver={Microsoft Access Driver (*.mdb)};DBQ=" + sDBQ + ";DriverID=22;READONLY=true";
      conn = DriverManager.getConnection(database);

      stmt = conn.prepareStatement("select newDate, photo_1 from main where id < 100 order by newDate");
      // stmt =
      // conn.prepareStatement("select newDate, photo_1 from main order by newDate");

      ResultSet rs = stmt.executeQuery();
      while (rs.next()) {
        dbImage.put(replaceFrenchCharacters(rs.getString("photo_1")), rs.getString("newDate"));
      }
    } catch (SQLException sqle) {
      logger.error("Error connection to db.", sqle);
    } finally {
      try {
        stmt.close();
        conn.close();
      } catch (SQLException fsqle) {
        logger.error("Error closing db call.", fsqle);
      }
    }

    return dbImage;
  }

  /**
   * Class to restructure images during media conversion
   */
  public static void main(String[] args) {
    String multimediaDir = "C:/GNB/multimedia/";
    try {
      new ImageFileMapper().runConversion(multimediaDir);
    } catch (Exception e) {
      logger.error("Exception in conversion", e);
    }
  }

  private static String replaceFrenchCharacters(String s) {
    String temp = "";
    if (Utils.isNotEmpty(s)) {
      temp = Normalizer.normalize(s, Normalizer.DECOMP, 0);
      temp.replaceAll("[^\\p{ASCII}]", "");
    }
    return temp;
  }

  /**
   * Utility method to rename all files in a directory by replacing any accented
   * French characters with English ones.
   *
   * @param dir
   *          The directory of the files to rename
   */
  private static void renameFilesWithFrenchCharacters(String dir) {
    File dirFile;
    File oldfile, newfile;
    String newname;
    String filenames[];
    int i;

    dirFile = new File(dir);
    if (!dirFile.exists() || !dirFile.isDirectory()) {
      logger.error("Directory does not exist.");
    }

    filenames = dirFile.list();
    for (i = 0; i < filenames.length; i++) {
      // must skip . and .., cannot rename them
      if (filenames[i].equals("."))
        continue;
      if (filenames[i].equals(".."))
        continue;
      // create a File object for existing file
      oldfile = new File(dirFile, filenames[i]);
      // next line creates the new name
      newname = replaceFrenchCharacters(filenames[i]);
      // create a File object for new name
      newfile = new File(dirFile, newname);
      // attempt to rename existing file
      if (!oldfile.renameTo(newfile)) {
        logger.error("Unable to rename " + oldfile);
      }
    }
  }

}
